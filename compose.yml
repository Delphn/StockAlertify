services:
  kafka:
    image: bitnami/kafka:3.9
    container_name: kafka
    ports:
      - "${KAFKA_PORT}:${KAFKA_PORT}"
    volumes:
      - kafka_data:/bitnami
    environment:
      # KRaft settings
      - KAFKA_CFG_NODE_ID=${KAFKA_CFG_NODE_ID}
      - KAFKA_CFG_PROCESS_ROLES=${KAFKA_CFG_PROCESS_ROLES}
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=${KAFKA_CFG_CONTROLLER_QUORUM_VOTERS}
      # Listeners
      - KAFKA_CFG_LISTENERS=${KAFKA_CFG_LISTENERS}
      - KAFKA_CFG_ADVERTISED_LISTENERS=${KAFKA_CFG_ADVERTISED_LISTENERS}
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=${KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP}
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=${KAFKA_CFG_CONTROLLER_LISTENER_NAMES}
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=${KAFKA_CFG_INTER_BROKER_LISTENER_NAME}

    networks:
      - kafka-network
    restart: unless-stopped

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui

    ports:
      - "${KAFKA_UI_PORT}:${KAFKA_UI_PORT}"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:${KAFKA_PORT}
    depends_on:
      - kafka
    networks:
      - kafka-network

  nestjs-producer:
    build:
      context: ./apps/nestjs-producer
      dockerfile: Dockerfile
      target: ${NODE_ENV}
    container_name: nestjs-producer
    depends_on:
      - kafka
    ports:
      - "${NESTJS_PRODUCER_PORT}:${NESTJS_PRODUCER_PORT}"
    environment:
      - NODE_ENV=${NODE_ENV}
    volumes:
      - ./apps/nestjs-producer:/app
      - ./.env.${NODE_ENV}:/app/.env.${NODE_ENV}
      - /app/node_modules
    networks:
      - kafka-network
    restart: unless-stopped

  nestjs-consumer:
    build:
      context: ./apps/nestjs-consumer
      dockerfile: Dockerfile
      target: ${NODE_ENV}
    container_name: nestjs-consumer
    depends_on:
      - kafka
    ports:
      - "${NESTJS_CONSUMER_PORT}:${NESTJS_CONSUMER_PORT}"
    environment:
      - NODE_ENV=${NODE_ENV}
    volumes:
      - ./apps/nestjs-consumer:/app
      - ./.env.${NODE_ENV}:/app/.env.${NODE_ENV}
      - /app/node_modules
    networks:
      - kafka-network
    restart: unless-stopped

  vue-admin-panel:
    build:
      context: ./apps/vue-admin-panel
      dockerfile: Dockerfile
      target: ${NODE_ENV}
    container_name: vue-admin-panel
    volumes:
      - ./apps/vue-admin-panel:/app
      - /app/node_modules
    ports:
      - "${VUE_PORT}:${VUE_PORT}"
    environment:
      - NODE_ENV=${NODE_ENV}
    depends_on:
      - nestjs-consumer

networks:
  kafka-network:
    driver: bridge

volumes:
  kafka_data:
    driver: local
